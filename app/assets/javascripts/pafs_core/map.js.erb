//define the osMap variable
var osMap;
var key = "<%= ENV["OS_MAPPING_API_KEY"] %>";
var polygonLayer;
var markerLayer;
var select;

function initMap() {
  if($('#map')){
    loadOSMap();
  }
}

function loadOSMap()
{

  var mapDiv = $('#map');
  var eastings = mapDiv.data('eastings'),
  northings = mapDiv.data('northings'),
  zoomLevel = mapDiv.data('zoomlevel'),
  marker = mapDiv.data('marker'),
  polygons = mapDiv.data('polygons');

  var polygonSource = new ol.source.Vector();
  var polygonFeatures = [];

  polygons.forEach(function(polygon) {
    shape = new ol.geom.Polygon([polygon]);
    polygonFeature = new ol.Feature(shape);
    polygonFeatures.push(polygonFeature);
  });

  polygonSource.addFeatures(polygonFeatures);

  polygonLayer = new ol.layer.Vector({
    source: polygonSource,
    style: new ol.style.Style({
      fill: new ol.style.Fill({
        color: 'rgba(255, 87, 32, 0.4)'
      }),
      stroke: new ol.style.Stroke({
        color: '#ffcc33',
        width: 4
      }),
    })
  });

  var markerPoint = new ol.geom.Point(marker);
  var markerFeature = new ol.Feature(markerPoint);
  var markerSource = new ol.source.Vector();
  markerSource.addFeatures([markerFeature]);

  markerLayer = new ol.layer.Vector({
    source: markerSource,
    style: new ol.style.Style({
      image: new ol.style.Circle({
        radius: 7,
        fill: new ol.style.Fill({
          color: '#ffcc33'
        })
      })
    })
  });

  var mapResolutions = [896, 448, 224, 112, 56, 28, 14, 7, 3.5, 1.75, 0.875, 0.4375, 0.21875, 0.109375];

  ol.DOTS_PER_INCH = 90.7;
  var epsg27700 = "+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 +datum=OSGB36 +units=m +no_defs";
  var url = "https://api2.ordnancesurvey.co.uk/mapping_api/v1/service/wmts?key=" + key ;

  proj4.defs["EPSG:27700"] = epsg27700;

  var epsg27700Projection = new ol.proj.Projection({
    code: epsg27700,
    extent: [-238375.0,0,700000,1300000]
  });

  var matrixIds = new Array(14);
  for (var z = 0, i = 13; z < 14; z++, i--) {
    matrixIds[z] = "EPSG:27700:" + z;
  }
  var attribution = new ol.Attribution({
    html: '&copy; <a href="http://www.ordnancesurvey.co.uk/">Ordnance Survey</a>'
  });
  var extent = [0,0,700000,1300000];

  osMap = new ol.Map({
    controls: ol.control.defaults({
      attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
        collapsible: false,
        attribution: attribution,
      })
    }),
    target: 'map',
    projection: epsg27700Projection,
    layers: [
      new ol.layer.Tile({
        extent: extent,
        source: new ol.source.WMTS({
          attributions: [attribution],
          crossOrigin: 'anonymous',
          url: url,
          layer: 'Outdoor 27700',
          matrixSet: 'EPSG:27700',
          format: 'image/png',
          projection: epsg27700Projection,
          tileGrid: new ol.tilegrid.WMTS({
            origin: [-238375.0, 1376256.0],
            resolutions: mapResolutions,
            matrixIds: matrixIds
          }),
          style: ''
        })
      })
    ],
    view: new ol.View({
        extent: extent,
        center: [eastings, northings],
        maxZoom: 20,
        minZoom: 7,
        zoom: zoomLevel
    })
  });


  osMap.addLayer(polygonLayer);
  osMap.addLayer(markerLayer);

  var draw;
  var drawingType;
  var source;
  if (typeof($('.location')[0]) !== 'undefined') {
    drawingType = "Point";
    source = markerSource
  } else if (typeof($('.benefit_area')[0]) !== 'undefined') {
    drawingType = "Polygon";
    source = polygonSource
  }

  var draw = new ol.interaction.Draw({
    source: source,
    type: /** @type {ol.geom.GeometryType} */ (drawingType),
  });
  osMap.addInteraction(draw);


  draw.on('drawstart', function (e) {
    if (drawingType === 'Point') {
       markerSource.clear();
    }
  });

  draw.on('drawend', function(e){
    features.push(e.feature);
  })

  var features = new ol.Collection();
  var layerFeatures = source.getFeatures();

  layerFeatures.forEach(function(feature){
    features.push(feature);
  });
  var modify = new ol.interaction.Modify({
    features: features,
        // the SHIFT key must be pressed to delete vertices, so
        // that new vertices can be drawn at the same position
        // of existing vertices
    deleteCondition: function(event) {
      return ol.events.condition.shiftKeyOnly(event) &&
      ol.events.condition.singleClick(event);
    }
  });

  osMap.addInteraction(modify);

  select = new ol.interaction.Select({
    layers: [polygonLayer],
    wrapX: false,
  });


  var selectPolygon = function(){
    osMap.removeInteraction(draw);
    osMap.removeInteraction(modify);
    osMap.addInteraction(select);
  }

  var drawPolygon = function(){
    osMap.removeInteraction(select);
    osMap.addInteraction(draw);
    osMap.addInteraction(modify);
  }

  var deletePolygon = function() {
    var selectedPolygon = select.getFeatures().getArray()[0];
    polygonSource.removeFeature(selectedPolygon);
    select.getFeatures().clear();
  }

  if($('location')[0]){
    $('#draw-polygon')[0].onclick = drawPolygon;
    $('#select-polygon')[0].onclick = selectPolygon;
    $('#delete-polygon')[0].onclick = deletePolygon;
  }

  var exportPNGElement = document.getElementById('export-png');

  if ('download' in exportPNGElement) {
    exportPNGElement.addEventListener('click', function() {
      osMap.once('postcompose', function(event) {
        var canvas = event.context.canvas;
        exportPNGElement.href = canvas.toDataURL('image/png');
      });
      osMap.renderSync();
    }, false);
  } else {
    var info = document.getElementById('no-download');
    info.style.display = '';
  }
}

$(document).ready(initMap);
